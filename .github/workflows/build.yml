# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: 
      - master
      - release/*
      - build-2
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest,windows-latest,macos-latest]
        python: [ 3.7]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
     
      - name: Build Application Windows
        if: runner.os == 'Windows'
        run: |
          python -m venv mainbuild
          mainbuild\Scripts\activate
          pip install -r requirements.txt
          pip install pyinstaller
          pyinstaller --onefile main-pygame.py
          7z a build${{ matrix.os }}.zip dist\ 
      - name: Build Application Non Windows
        if: runner.os != 'Windows'
        run: |
          mkdir dist
          pip install -r requirements.txt
          pip install pyinstaller
          pyinstaller --onefile main-pygame.py
          7z a build${{ matrix.os }}.zip dist
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false 
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: build${{ matrix.os }}.zip
          asset_name: build${{ matrix.os }}.zip
          asset_content_type: application/zip
          
